# =================================================================
# FLII12Pglu Fluorescence Analysis Script
# =================================================================
# This script analyzes fluorescence microscopy data from dual channels
# and performs:
# 1. Background subtraction
# 2. Multiple fitting approaches for photobleaching correction
# 3. pH correlation analysis and correction
# 
# =================================================================

# INPUT FILE REQUIREMENTS
# =================================================================
# 1. File Naming Convention:
#    - Main files with PMT channel data
#    - pHrodo files must have "pHrodo" in filename
#    - Each main file must have a matching pHrodo file
#
# 2. Main File Format:
#    - Column 1: treatments (any label)
#    - Column 2: treatments (any label)
#    - Multiple columns for YFP measurements
#    - Multiple columns for CFP measurements
#    - Last column in each channel should be background
#
# 3. Data Requirements:
#    - Time points must be aligned between files
#    - Background measurements included
#    - No missing values in measurement columns
# =================================================================

# Load required packages
library(tidyverse)  # For data manipulation and visualization
library(readr)      # For reading CSV files
library(rowr)       # For row operations
library(MESS)       # For calculations
library(broom)      # For tidy model outputs
library(varhandle)  # For variable handling
library(plotrix)    # For error calculations
library(aomisc)     # For curve fitting
library(CausalImpact)  # For time series analysis

# Set working directory and file paths
setwd("~/")  # Change this to your working directory
input_path <- "xyz"   # Directory containing input files
output_path <- "abc"  # Directory for saving results

# Get list of input files and separate by type
list1 <- as.data.frame(list.files(path=input_path))
colnames(list1) <- c("files")

# Separate pHrodo files from main data files
list2 <- as.data.frame(list1[c(which(grepl("pHrodo",list1$files)==T)),])
colnames(list2) <- c("files")
list1 <- as.data.frame(list1[-c(which(grepl("pHrodo",list1$files)==T)),])
colnames(list1) <- c("files")

# Process each data file
for (list_files in 1:(nrow(list1))) {
  # =================================================================
  # Initial Data Processing
  # =================================================================
  
  # Read and process current file
  file_uploaded <- as.character(list1[c(list_files),])
  ratio_file <- read_csv(paste0(input_path,"/",file_uploaded))
  
  # Standardize column names
  colnames(ratio_file) <- c("...1", "Time [m:s]", colnames(ratio_file[,3:ncol(ratio_file)]))
  
  # Remove NA rows if present
  rem1 <- which(is.na(ratio_file$`Time [m:s]`)==T)
  if (is_empty(rem1)==F) {
    ratio_file <- ratio_file[-c(rem1),]
  }
  
  # =================================================================
  # Channel Separation and Background Correction
  # =================================================================
  
  # Separate channels and process YFP channel
  col_names <- as.data.frame(colnames(ratio_file))
  rem_cols <- which(grepl("YFP", col_names$`colnames(ratio_file)`)==T)
  ratio_file_YFP <- as.data.frame(ratio_file[,-c(rem_cols)])
  
  # Background subtraction for YFP channel
  for (j in 3:(ncol(ratio_file_YFP)-1)) {
    col1 <- as.matrix(ratio_file_YFP[,c(j)])
    col_back <- as.matrix(ratio_file_YFP[,c(ncol(ratio_file_YFP))])
    ratio_file_YFP[,c(j)] <- col1-col_back
  }
  ratio_file_YFP[,c(ncol(ratio_file_YFP))] <- NULL
  
  # Process CFP channel
  ratio_file_CFP <- as.data.frame(ratio_file[,c(1,2,rem_cols)])
  
  # Background subtraction for CFP channel
  for (j in 3:(ncol(ratio_file_CFP)-1)) {
    col1 <- as.matrix(ratio_file_CFP[,c(j)])
    col_back <- as.matrix(ratio_file_CFP[,c(ncol(ratio_file_CFP))])
    ratio_file_CFP[,c(j)] <- col1-col_back
  }
  ratio_file_CFP[,c(ncol(ratio_file_CFP))] <- NULL
  
  # Get treatment timepoint
  time_add <- as.numeric(ratio_file[c(which(ratio_file$...1==1)),2])
  
  # Get baseline period data
  ratio_file_CFP_back <- filter(ratio_file_CFP, ratio_file_CFP$`Time [m:s]`<time_add)
  ratio_file_YFP_back <- filter(ratio_file_YFP, ratio_file_YFP$`Time [m:s]`<time_add)
  
  # =================================================================
  # Photobleaching Correction
  # =================================================================
  
  for (i in 3:ncol(ratio_file_CFP)) {
    # Process CFP channel
    full_data <- ratio_file_CFP_back[,c(2,i)]
    colnames(full_data) <- c("X","Y")
    
    # Try exponential decay fit
    a <- try(nls(Y ~ NLS.expoDecay(X, a, k), data = full_data), silent = TRUE)
    
    if (grepl("Error",a[1])==T) {
      # If fitting fails, use mean normalization
      ratio_file_CFP[,c(i)] <- ratio_file_CFP[,c(i)]/mean(full_data$Y)
    } else {
      # Apply exponential decay correction
      nlsfit <- nls(Y ~ NLS.expoDecay(X, a, k), data = full_data)
      nlsfit_vals <- as.data.frame(tidy(nlsfit))
      full_data2 <- as.data.frame(ratio_file_CFP[,c(2,i)])
      colnames(full_data2) <- c("X","Y")
      
      # Extract parameters
      Y0 <- as.numeric(nlsfit_vals[1,2])
      k <- as.numeric(nlsfit_vals[2,2])
      
      # Calculate corrections
      full_data2 <- full_data2 %>% 
        mutate(Y2=(Y0)*exp((-k)*full_data2$X)) %>%
        mutate(Y3=full_data2$Y/full_data2$Y2) %>%
        mutate(Y4=full_data2$Y3*full_data2$Y)
      
      # Apply correction based on trend
      if (full_data2[1,3]>full_data2[nrow(full_data2),3]) {
        ratio_file_CFP[,c(i)] <- full_data2$Y4
      } else {
        ratio_file_CFP[,c(i)] <- full_data2$Y
      }
    }
    
    # Process YFP channel with same parameters
    full_data <- ratio_file_YFP_back[,c(2,i)]
    colnames(full_data) <- c("X","Y")
    
    if (grepl("Error",a[1])==T) {
      ratio_file_YFP[,c(i)] <- ratio_file_YFP[,c(i)]/mean(full_data$Y)
    } else {
      full_data2 <- as.data.frame(ratio_file_YFP[,c(2,i)])
      colnames(full_data2) <- c("X","Y")
      
      # Use same correction parameters as YFP
      full_data2 <- full_data2 %>% 
        mutate(Y2=(Y0)*exp((-k)*full_data2$X)) %>%
        mutate(Y3=full_data2$Y/full_data2$Y2) %>%
        mutate(Y4=full_data2$Y3*full_data2$Y)
      
      ratio_file_YFP[,c(i)] <- full_data2$Y4
    }
  }
  
  # =================================================================
  # Ratio Calculations and Fit Type Analysis
  # =================================================================
  
  # Calculate YFP/CFP ratios
  final_ratios <- ratio_file_YFP
  for (k in 3:ncol(final_ratios)) {
    YFP <- ratio_file_YFP[,c(k)]
    CFP <- ratio_file_CFP[,c(k)] 
    final_ratios[,c(k)] <- YFP/CFP
  }
  final_ratios_original <- final_ratios
  
  # Initialize correction matrices
  final_ratios_baseline <- final_ratios_original
  final_ratios_corrected <- final_ratios_original
  
  # Create fit type tracking matrix
  fit_type <- as.data.frame(matrix(NA, nrow=ncol(final_ratios_original)-2, ncol=1))
  rownames(fit_type) <- colnames(final_ratios_original[,3:ncol(final_ratios_original)])
  
  # =================================================================
  # Normalize to baseline
  # =================================================================
  
  for (i in 3:ncol(final_ratios_original)) {
    # Get baseline data
    full_data <- final_ratios_original[,c(1,2,i)]
    full_data <- filter(full_data, full_data$`Time [m:s]`<time_add)
    full_data[,c(1)] <- NULL
    colnames(full_data) <- c("X","Y")
    
    # Try different fitting methods
    # 1. Simple exponential decay
    a <- try(nlsfit <- nls(Y ~ NLS.expoDecay(X, a, k), data = full_data), silent = TRUE)
    
    if (grepl("Error",a[1])==T) {
      # 2. Asymptotic regression if exponential fails
      b <- try(nls(Y ~ SSasymp(X, yf, y0, log_alpha), data = full_data), silent = TRUE)
      
      if (grepl("Error",b[1])==F) {
        # Asymptotic fit successful
        fit_type[i-2,1] <- "asymptotic"
        nlsfit <- nls(Y ~ SSasymp(X, yf, y0, log_alpha), data = full_data)
        nlsfit_vals <- as.data.frame(tidy(nlsfit))
        
        # Process data with asymptotic fit
        full_data2 <- as.data.frame(final_ratios_original[,c(2,i)])
        colnames(full_data2) <- c("X","Y")
        
        # Extract parameters
        Y0 <- as.numeric(nlsfit_vals[2,2])
        k <- exp(as.numeric(nlsfit_vals[3,2]))
        Yf <- as.numeric(nlsfit_vals[1,2])
        
        # Calculate corrections
        full_data2 <- full_data2 %>% 
          mutate(Y2=((Y0-Yf)*exp((-1*k)*full_data2$X))+Yf) %>%
          mutate(Y3=(full_data2$Y/full_data2$Y2)*as.numeric(full_data2[1,2]))
        
        final_ratios_baseline[,c(i)] <- full_data2$Y2
        final_ratios_corrected[,c(i)] <- full_data2$Y3
      } else {
        # Both fits failed
        fit_type[i-2,1] <- "neither"
        final_ratios_baseline[,c(i)] <- NA
        final_ratios_corrected[,c(i)] <- final_ratios_original[,c(i)]
      }
    } else {
      # Simple exponential fit successful
      fit_type[i-2,1] <- "simple exponential"
      nlsfit <- nls(Y ~ NLS.expoDecay(X, a, k), data = full_data)
      nlsfit_vals <- as.data.frame(tidy(nlsfit))
      
      # Process data
      full_data2 <- as.data.frame(final_ratios_original[,c(2,i)])
      colnames(full_data2) <- c("X","Y")
      
      # Extract parameters
      Y0 <- as.numeric(nlsfit_vals[1,2])
      k <- as.numeric(nlsfit_vals[2,2])
      
      # Calculate corrections
      full_data2 <- full_data2 %>% 
        mutate(Y2=(Y0)*exp((-k)*full_data2$X)) %>%
        mutate(Y3=(full_data2$Y/full_data2$Y2)*as.numeric(full_data2[1,2]))
      
      final_ratios_baseline[,c(i)] <- full_data2$Y2
      final_ratios_corrected[,c(i)] <- full_data2$Y3
    }
  }
  
  # =================================================================
  # Save Normalized Results
  # =================================================================
  
  # Save fit type information and corrected ratios
  write.csv(fit_type, paste0(output_path,"/fit_type_",file_uploaded))
  write.csv(final_ratios_corrected, paste0(output_path,"/original_Pglu_ratios_baseline_corrected_",file_uploaded))
  
  # Update final ratios for pH correction
  final_ratios <- final_ratios_corrected
  
  # =================================================================
  # pHrodo Data Processing
  # =================================================================
  
  # Read and process pHrodo file
  downloaded_file <- as.character(list2[c(list_files),])
  pHRed <- read_csv(paste0(input_path,"/",downloaded_file))
  colnames(pHRed) <- c("...1","Time [m:s]",colnames(pHRed[,3:ncol(pHRed)]))
  
  # Remove NA rows if present
  rem2 <- which(is.na(pHRed$`Time [m:s]`)==T)
  if (is_empty(rem2)==F){
    pHRed <- pHRed[-c(rem2),]
  }
  
  # Background subtraction for pHrodo
  for (j in 3:(ncol(pHRed)-1)){
    col1 <- as.matrix(pHRed[,c(j)])
    col1 <- as.numeric(col1)
    col_back <- as.matrix(pHRed[,c(ncol(pHRed))])
    pHRed[,c(j)] <- col1-col_back
  }
  pHRed[,c(ncol(pHRed))] <- NULL
  
  # Get baseline period
  pHRed_back <- filter(pHRed,pHRed$`Time [m:s]`<time_add)
  
  # Apply photobleaching correction to pHrodo data
  for (i in 3:ncol(pHRed)){
    full_data <- pHRed_back[,c(2,i)]
    colnames(full_data) <- c("X","Y")
    
    # Try exponential decay fit
    a <- try(nls(Y ~ NLS.expoDecay(X, a, k),data = full_data),silent = TRUE)
    
    if (grepl("Error",a[1])==T){
      pHRed[,c(i)] <- pHRed[,c(i)]/mean(full_data$Y)
    } else {
      nlsfit <- nls(Y ~ NLS.expoDecay(X, a, k),data = full_data)
      nlsfit_vals <- as.data.frame(tidy(nlsfit))
      full_data2 <- as.data.frame(pHRed[,c(2,i)])
      colnames(full_data2) <- c("X","Y")
      
      # Extract parameters
      Y0 <- as.numeric(nlsfit_vals[1,2])
      k <- as.numeric(nlsfit_vals[2,2])
      
      # Calculate corrections
      full_data2 <- full_data2 %>% 
        mutate(Y2=(Y0)*exp((-k)*full_data2$X)) %>%
        mutate(Y3=full_data2$Y/full_data2$Y2) %>%
        mutate(Y4=full_data2$Y3*full_data2$Y)
      
      # Apply correction based on trend
      if (full_data2[1,3]>full_data2[nrow(full_data2),3]){
        pHRed[,c(i)] <- full_data2$Y4
      } else {
        pHRed[,c(i)] <- full_data2$Y
      }
    }
  }
  
  # Normalize pHrodo data to baseline
  for (i in 3:ncol(pHRed)){
    col1 <- as.data.frame(pHRed[,c(i)])
    col2 <- col1[c(1:(which(pHRed$...1==1)-1)),]
    norm_val <- mean(col2)
    pHRed[,c(i)] <- pHRed[,c(i)]/norm_val
  }
  
  # =================================================================
  # pH Correction Analysis
  # =================================================================
  
  final_ratios_corrected <- final_ratios
  
  for (l in 3:ncol(final_ratios)){
    # Combine Pglu and pH data
    new_col <- as.data.frame(cbind(final_ratios[,c(l)],pHRed[,c(l)]))
    colnames(new_col) <- c("Pglu","pHRed")
    
    # Process baseline and post-treatment periods
    new_col2a <- new_col[c(1:(which(final_ratios$...1==1)-1)),]
    new_col2b <- new_col[c((which(final_ratios$...1==3)-1):nrow(new_col)),]
    new_col2b[,1] <- new_col2b[,1]/new_col2b[1,1]
    new_col2b[,2] <- new_col2b[,2]/new_col2b[1,2]
    new_col2b <- as.data.frame(new_col2b[-c(1),])
    new_col3 <- as.data.frame(rbind(new_col2a,new_col2b))
    new_col3 <- new_col3-1
    
    # Linear regression for pH correction
    lm_Pglu_pH = lm(Pglu~pHRed, data = new_col3) 
    lm_Pglu_pH_vals <- as.data.frame(tidy(lm_Pglu_pH))
    m <- as.numeric(lm_Pglu_pH_vals[2,2])
    c <- as.numeric(lm_Pglu_pH_vals[1,2])
    
    # Apply pH correction
    new_col$pHRed <- new_col$pHRed-1
    new_col <- new_col %>% 
      mutate(Pglu_corrected = m*(new_col$pHRed)+c) %>%
      mutate(Pglu_corrected2 = (new_col$Pglu-new_col$Pglu_corrected))
    
    final_ratios_corrected[,c(l)] <- new_col$Pglu_corrected2
  }
  
  # Save final pH-corrected results
  write.csv(final_ratios_corrected,paste0(output_path,"/original_Pglu_ratios_pH_corrected_",file_uploaded))
}

# =================================================================
# Analysis Complete
# =================================================================
# Output files include:
# 1. Fit type information for each trace
# 2. Baseline-corrected ratios
# 3. pH-corrected ratios
#
# The analysis performs:
# - Background subtraction
# - Photobleaching correction using multiple fitting methods
# - pH correlation analysis and correction
# - Automated selection of best fitting approach
# =================================================================
